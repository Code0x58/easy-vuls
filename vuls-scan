#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
Preform a scan of host using vuls.

Requirements:
 * docker
 * run as a user with permission to run docker containers
 * ssh-agent running and SSH_AUTH_SOCK environ
 * internet access to pull docker images, and for the work time containers do

TODO: add logging for this script/module
TODO: work out how dependable prepare is
 - doesn't look good as there was a [yN] on debian which failed
TODO: fix results permissions issue, maybe with --userns-remap, but probably
 not as it involves changing system level config (for the daemon).
"""
import os
import sqlite3
import sys
from datetime import date, datetime, timedelta
from subprocess import run


class VulsScanner(object):
    """
    """
    def __init__(self, host_list=None):
        self.base_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
        self.data_directory = self._abs_path('./vuls-scan.data')
        self.refresh_period = timedelta(hours=6)
        self.force_update = False
        self.host_list = host_list

        self.ensure_directories()
        self.ensure_data()
        self.generate_scan_config()

    def _abs_path(self, path):
        return os.path.join(self.base_directory, path)

    def ensure_directories(self):
        """
        Ensure all the required directories exist.
        """
        directories = [self._abs_path(d) for d in (
            './vuls-scan.results',
            './vuls-scan.logs',
            './vuls-scan.logs/fetchnvd',
            './vuls-scan.logs/vuls',
            './vuls-scan.data',
        )]
        for directory in directories:
            if not os.path.isdir(directory):
                if os.path.exists(directory):
                    raise ValueError("{} is not a directory".format(directory))
                os.makedirs(directory)

    def ensure_data(self):
        """
        Ensure there is CVE data that vuls can use
        """
        # get the latest year in data
        database_path = self._abs_path('./vuls-scan.data/cve.sqlite3')
        start_year = None
        if (not os.path.isfile(database_path)
                or os.path.getsize(database_path) == 0):
            start_year = 2002
            # create the file so the permissions are correct
            with open(database_path, 'wb'):
                pass
        else:
            # see if an update is needed - could just look at last modified in some systems
            database = sqlite3.connect(
                    database_path,
                    detect_types=sqlite3.PARSE_COLNAMES,
                    )
            cursor = database.cursor()
            last_update = cursor.execute('''
                    SELECT Max(updated_at) as "[timestamp]"
                    FROM   cve_details
                    ''').fetchone()[0]
            # import pdb; pdb.set_trace()
            if (datetime.now() - last_update > self.refresh_period
                    or self.force_update):
                start_year = last_update.year

        if start_year is not None:
            self.pull_year_cve_data(range(start_year, date.today().year + 1))

    def pull_year_cve_data(self, years):
        command = [
            'docker', 'run',
            '--rm', '--interactive', '--tty',
            '--volume={}/vuls-scan.data:/vuls'.format(self.base_directory),
            '--volume={}/vuls-scan.logs/fetchnvd:/var/log/vuls'.format(self.base_directory),
            'vuls/go-cve-dictionary',
            'fetchnvd', '-years',
        ]
        command += [str(year) for year in years]
        run(command)

    def generate_scan_config(self):
        """
        Generate a config.toml or use an existing one.
        """
        # skip out and use existing config. If it doesn't exist then latest
        # vuls do the complaining
        if self.host_list is None:
            return
        vuls_config_path = self._abs_path('vuls-scan.data/config.toml')
        config = [
            '[default]',
            'port = "22"',
            'user = "root"',
            '[servers]',
        ]
        # if using a private key rather than ssh-agent then add
        # keyPath = "/root/.ssh/id_rsa"
        for name, target in self.host_list:
            # TODO: verify name
            # TODO: allow host:port
            config += [
                '[servers.{}]'.format(name),
                'host = "{}"'.format(target),
            ]
        with open(vuls_config_path, 'wb') as config_file:
            config_file.writelines((line+'\n').encode('utf-8') for line in config)


    def perform_scan(self):
        """
        Scan the target machines.
        """
        # TODO: add private SSH key option
        # TODO: consider optional report type
        # TODO: check SSH_AUTH_SOCK is set
        # '--volume=ssh/:/root/.ssh/:ro'
        ssh_auth_sock = os.environ['SSH_AUTH_SOCK']
        results_dir = self._abs_path('./vuls-scan.results')
        command = [
                'docker', 'run', '--rm',
                '--volume=/etc/localtime:/etc/localtime:ro',
                '--volume={}:/vuls'.format(self.data_directory),
                '--volume={0}:{0}'.format(results_dir),
                '--volume={}:/var/log/vuls'.format(self._abs_path('./vuls-scan.logs/vuls')),
                '--volume={}:/vuls/SSH_AUTH_SOCK'.format(ssh_auth_sock),
                '--env=SSH_AUTH_SOCK=/vuls/SSH_AUTH_SOCK',
                'vuls/vuls',
                'scan',
                '--results-dir={}'.format(results_dir),
                '-cve-dictionary-dbpath=/vuls/cve.sqlite3',
                '-report-json',
        ]
        run(command)

host_list = [
    ('bristac{}'.format(i), 'bristac{}.miniserver.com'.format(i))
    for i in range(6)
]
scanner = VulsScanner(host_list)
scanner.perform_scan()
